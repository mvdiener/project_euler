//The sequence of triangle numbers is generated by adding the natural numbers.So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

//1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

//Let us list the factors of the first seven triangle numbers:

// 1: 1
// 3: 1,3
// 6: 1,2,3,6
//10: 1,2,5,10
//15: 1,3,5,15
//21: 1,3,7,21
//28: 1,2,4,7,14,28
//We can see that 28 is the first triangle number to have over five divisors.

//What is the value of the first triangle number to have over five hundred divisors?

using System;
using System.Collections.Generic;

namespace Problem012
{
   class MainClass
   {
      public static void Main()
      {
         Console.WriteLine(FindTriangleNumberFactors(500));
      }

      public static int FindTriangleNumberFactors(int start)
      {
         int factors = 0;
         int triangleNumber = 0;
         Dictionary<long, long> factorsResult = new Dictionary<long, long>();
         while (factors < 500)
         {
            Dictionary<long, long> factorAndCountObject = new Dictionary<long, long>();
            triangleNumber = (start * (start + 1)) / 2;
            factorsResult = PrimeFactors((long)triangleNumber, factorAndCountObject);
            factors = NumberOfFactors(factorsResult);
            start++;
         }
         return triangleNumber;
      }

      public static Dictionary<long, long> PrimeFactors(long number, Dictionary<long, long> factorAndCountObject)
      {
         for (long i = 2; i <= number; i++)
         {
            if (number % i == 0)
            {
               if (factorAndCountObject.ContainsKey(i))
               {
                  factorAndCountObject[i] += 1;
               }
               else
               {
                  factorAndCountObject.Add(i, 1);
               }
               number = number / i;
               PrimeFactors(number, factorAndCountObject);
               break;
            }
         }
         return factorAndCountObject;
      }

      public static int NumberOfFactors(Dictionary<long, long> factorAndCountObject)
      {
         int totalFactors = 1;
         foreach (var factor in factorAndCountObject)
         {
            totalFactors *= (int)factor.Value + 1;
         }

         return totalFactors;
      }
   }
}
